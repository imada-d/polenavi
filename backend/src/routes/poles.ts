// 何を: 柱の登録・検索APIのルート定義
// なぜ: フロントエンドからのリクエストを処理するため

import express from 'express';
import { PrismaClient } from '@prisma/client';

const router = express.Router();
const prisma = new PrismaClient();

// 何を: 柱を登録するエンドポイント
// なぜ: フロントエンドから送信されたデータをDBに保存するため
router.post('/', async (req, res) => {
  try {
    const { location, poleType, poleSubType, plateCount, numbers } = req.body;

    // バリデーション
    if (!location || !Array.isArray(location) || location.length !== 2) {
      return res.status(400).json({ error: '位置情報が不正です' });
    }

    if (!poleType || !['electric', 'other'].includes(poleType)) {
      return res.status(400).json({ error: '柱の種類が不正です' });
    }

    if (plateCount === null || plateCount === undefined) {
      return res.status(400).json({ error: '番号札の枚数が不正です' });
    }

    if (!numbers || !Array.isArray(numbers) || numbers.length === 0) {
      return res.status(400).json({ error: '番号が不正です' });
    }

    const [latitude, longitude] = location;

    // 何を: トランザクションでPoleとPoleNumberを作成
    // なぜ: データの整合性を保つため（どちらか片方だけ作成されることを防ぐ）
    const result = await prisma.$transaction(async (tx) => {
      // 1. Pole（柱）を作成
      const pole = await tx.pole.create({
        data: {
          latitude,
          longitude,
          poleTypeName: poleType === 'electric' ? '電柱' : 
                       poleSubType === 'light' ? '照明柱' :
                       poleSubType === 'sign' ? '標識柱' :
                       poleSubType === 'traffic' ? '信号柱' : 'その他',
          numberCount: numbers.length,
          photoCount: 0,
        },
      });

      // 2. PoleNumber（番号）を複数作成
      const poleNumbers = await Promise.all(
        numbers.map((number: string, index: number) => {
          // 空文字は登録しない
          if (!number || number.trim() === '') {
            return null;
          }

          return tx.poleNumber.create({
            data: {
              poleId: pole.id,
              poleNumber: number.trim(),
              operatorName: poleType === 'electric' ? '電力会社' : 
                           poleSubType === 'light' ? '自治体' :
                           poleSubType === 'sign' ? '国交省' :
                           poleSubType === 'traffic' ? '警察' : 'その他',
              isAutoGenerated: number.startsWith('#NoID-'),
              locationMethod: 'auto',
            },
          });
        })
      );

      // nullを除外
      const createdNumbers = poleNumbers.filter(n => n !== null);

      return {
        pole,
        numbers: createdNumbers,
      };
    });

    // 成功レスポンス
    res.status(201).json({
      success: true,
      message: '登録が完了しました',
      data: {
        poleId: result.pole.id,
        numberCount: result.numbers.length,
      },
    });

  } catch (error: any) {
    console.error('登録エラー:', error);

    // 重複エラー
    if (error.code === 'P2002') {
      return res.status(409).json({
        error: 'この番号は既に登録されています',
        field: error.meta?.target,
      });
    }

    // その他のエラー
    res.status(500).json({
      error: '登録に失敗しました',
      message: process.env.NODE_ENV === 'development' ? error.message : undefined,
    });
  }
});

// 何を: 柱を検索するエンドポイント（Phase 2で実装）
// なぜ: 登録した柱を検索できるようにするため
router.get('/', async (req, res) => {
  res.status(501).json({ message: '検索機能は未実装です（Phase 2で実装予定）' });
});

export default router;